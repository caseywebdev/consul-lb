daemon off;

events {}

http {
  server_tokens off;

  map $http_upgrade $connection_upgrade {
    '' close;
    default upgrade;
  }

  proxy_set_header Connection $connection_upgrade;
  proxy_set_header Host $host;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Real-IP $remote_addr;

{{- if eq (env "USE_SSL") "1" }}

  # VERSION {{keyOrDefault (print (env "CONSUL_SERVICE_NAME") "/" (env "LETSENCRYPT_TEST_CERT") "/version") "?"}}
  ssl_certificate /code/private/fullchain.pem;
  ssl_certificate_key /code/private/privkey.pem;

  server {
    listen 80 default_server;

    root /code/public;

    location /.well-known/acme-challenge {}

    location / {
      return 302 https://$host$request_uri;
    }
  }
{{- end -}}

{{- $prefix := env "CONSUL_TAG_PREFIX" -}}
{{- $prefixAuthRegex := print "^" $prefix "\\.auth=" -}}
{{- $prefixAuthSplit := print $prefix ".auth=" -}}
{{- $prefixUrlRegex := print "^" $prefix "\\.url=" -}}
{{- $prefixUrlSplit := print $prefix ".url=" -}}
{{- range services -}}
  {{- range $service := service (print .Name "|any") -}}
    {{- range .Tags -}}
      {{ if regexMatch $prefixUrlRegex . -}}
        {{- if $url := index (split $prefixUrlSplit .) 1 -}}
          {{- $domain := regexReplaceAll "/.*$" "" $url -}}
          {{- $path := regexReplaceAll (print "^" $domain "/?") "/" $url -}}
          {{- $upstream := regexReplaceAll "[^0-9A-Za-z_]" "_" (print $domain $path) -}}
          {{- $server := (print $service.Address ":" $service.Port) -}}
          {{- scratch.MapSet "domains" $domain $domain -}}
          {{- scratch.MapSet (print "pathsByDomain:" $domain) $path $path -}}
          {{- scratch.MapSet (print "upstreamsByDomain:" $domain) $path $upstream -}}
          {{- if ne $service.Status "failing" -}}
            {{- scratch.MapSet (print "serversByUpstream:" $upstream) $server $server}}
          {{- end -}}
          {{- range $service.Tags -}}
            {{ if regexMatch $prefixAuthRegex . -}}
              {{- if $auth := index (split $prefixAuthSplit .) 1 -}}
                {{- $auth := regexReplaceAll "[^0-9A-Za-z_]" "_" $auth -}}
                {{- scratch.MapSet (print "authsByDomain:" $domain) $path $auth -}}
              {{- end -}}
            {{- end -}}
          {{- end -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
{{- end -}}
{{- range $domain := scratch.MapValues "domains" -}}
  {{- range scratch.MapValues (print "upstreamsByDomain:" .)}}

  upstream {{.}} {
    least_conn;
    {{- range scratch.MapValues (print "serversByUpstream:" .)}}
    server {{.}};
    {{- else}}
    server localhost:65535;
    {{- end}}
  }
  {{- end}}

  server {
    listen {{if eq (env "USE_SSL") "1"}}443 ssl{{else}}80{{end}};
    server_name {{$domain}};

  {{- $authsByDomain := scratch.Get (print "authsByDomain:" .) -}}
  {{- range scratch.MapValues (print "pathsByDomain:" $domain)}}

    location {{.}} {
    {{- if $authsByDomain -}}
      {{- if $auth := index $authsByDomain .}}
      auth_basic Restricted;
      auth_basic_user_file /code/private/{{$auth}}.auth;
      {{- end}}
    {{- end -}}
      proxy_pass http://{{index (scratch.Get (print "upstreamsByDomain:" $domain)) .}};
    }
  {{- end}}
  }
{{- end}}
}
