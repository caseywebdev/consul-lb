daemon off;

events {}

http {
  server_tokens off;

  map $http_upgrade $connection_upgrade {
    '' close;
    default upgrade;
  }

  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header Connection $connection_upgrade;

  {{- if eq (env "USE_SSL") "1"}}

  ssl_certificate /etc/letsencrypt/live/consul-lb/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/consul-lb/privkey.pem;

  server {
    listen 80 default_server;

    root /code/public;

    location /.well-known/acme-challenge {}

    location / {
      return 302 https://$host$request_uri;
    }
  }
  {{- end -}}

  {{- $prefix := (env "CONSUL_LB_PREFIX") -}}
  {{- range services -}}
    {{- range $service := service (print .Name "|any") -}}
      {{- range .Tags -}}
        {{- if regexMatch (print "^" $prefix) . -}}
          {{- if $url := index (split $prefix .) 1 -}}
            {{- $server := regexReplaceAll "/.*$" "" $url -}}
            {{- $path := regexReplaceAll (print "^" $server "/?") "/" $url -}}
            {{- $upstream := regexReplaceAll "[^0-9A-Za-z_]" "_" (print $server $path) -}}
            {{- $host := (print $service.Address ":" $service.Port) -}}
            {{- scratch.MapSet "servers" $server $server -}}
            {{- scratch.MapSet (print "pathsByServer:" $server) $path $path -}}
            {{- scratch.MapSet (print "upstreamsByServer:" $server) $path $upstream -}}
            {{- if ne $service.Status "failing" -}}
              {{- scratch.MapSet (print "hostsByUpstream:" $upstream) $host $host}}
            {{- end -}}
          {{- end -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- range $server := scratch.MapValues "servers" -}}
    {{- range scratch.MapValues (print "upstreamsByServer:" .)}}

  upstream {{.}} {
    least_conn;
      {{- range scratch.MapValues (print "hostsByUpstream:" .)}}
    server {{.}};
      {{- else -}}
    server localhost:65535;
      {{- end}}
  }
    {{- end}}

  server {
    listen {{if eq (env "USE_SSL") "1"}}443 ssl{{else}}80{{end}};
    server_name {{$server}};

    {{- range scratch.MapValues (print "pathsByServer:" $server)}}

    location {{.}} {
      proxy_pass http://{{index (scratch.Get (print "upstreamsByServer:" $server)) .}};
    }
    {{- end}}
  }
  {{- end}}
}
